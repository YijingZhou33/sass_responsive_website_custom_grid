.row {
    // if the viewport is smaller than specified, it will automatically fill 100% of the space
    max-width: $grid-width;
    // background-color: #eee;
    // center a block element inside another block element
    margin: 0 auto;
    // move the margin at the bottom
    // &:last-child {
    //     margin-bottom: 0;
    // }
    // select everything except last child
    &:not(:last-child) {
        margin-bottom: $gutter-vertical;
        @include respond(tab-port) {
            margin-bottom: $gutter-vertical-small;
        }
    }
    @include respond(tab-port) {
        max-width: 50rem;
        padding: 0 3rem;
    }
    @include clearfix;
    // attribute selector: ^= represents what we want in the beginning
    // select all elements with class attribute starts with "col-"
    [class^="col-"] {
        // background-color: $color-primary;
        float: left;
        // right margin for all columns except the last one
        &:not(:last-child) {
            margin-right: $gutter-horizontal;
            @include respond(tab-port) {
                margin-right: 0rem;
                margin-bottom: $gutter-vertical-small;
            }
        }
        @include respond(tab-port) {
            // for mobile device, transform columns into rows
            // so entire mobile webpage will have one single column
            width: 100% !important;
        }
    }
    // (the width of the whole row - gutter) / 2
    // calc() can do mathematical calculations and mix units
    // In Sass we can't do multiple units calculations
    // compile the file when developing the layout even before the page is served to the user
    // but calculations depend on the layout as it has to happen while the website is rendered using visual formatting model
    .col-1-of-2 {
        width: calc((100% - #{$gutter-horizontal}) / 2);
    }
    .col-1-of-3 {
        width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
    }
    // 2 * col-1-of-3 + $gutter-horizontal
    .col-2-of-3 {
        width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
    }
    .col-1-of-4 {
        width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
    }
    .col-2-of-4 {
        width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
    }
    .col-3-of-4 {
        width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
    }
}